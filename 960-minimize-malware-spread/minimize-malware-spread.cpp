class Solution {
public:
    class DSU{
    public:
        vector<int> parent, sz;
        DSU(int n){
            parent.resize(n);
            sz.resize(n, 1);
            for(int i = 0; i<n; i++)parent[i] = i;
        }
        int findSet(int a){
            if(a == parent[a]) return a;
            return parent[a] = findSet(parent[a]);
        }
        void unionSet(int a, int b){
            a = findSet(a);
            b = findSet(b);
            if (a != b) {
              if (sz[a] < sz[b]) swap(a, b);
              parent[b] = a;
              sz[a] += sz[b];
            }
        }
    };
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU uf(n);
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(graph[i][j]) uf.unionSet(i,j);
            }
        }
        vector<int> infected(n, 0);
        int ans = n+1, val = -1;
        for(auto x: initial){
            ans = min(ans, x);
            int p = uf.findSet(x);
            infected[p]++;
        }
        for(auto x: initial){
            int p = uf.findSet(x);
            if(infected[p] == 1 && uf.sz[p] >= val){
                if(uf.sz[p] == val){
                    ans = min(ans, x);
                }
                else{
                    ans = x;
                    val = uf.sz[p];
                }
            }
        }
        return ans;
    }
};